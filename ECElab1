#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>



int whichSet();
int setIndexLength();
int offsetLength();
int hitWay();
void updateOnHit();
void updateOnMiss();
int mylog2();
int *tag;

main(int argc, char **argv){
	// this is for a small test case
	//String[] = {408ed4, 10019d94, 408ed8}
	//printf("%i",  mylog2(1100));
	int L, K, C;
	char * file;
	
	sscanf (argv[1], "%d", &K);
	sscanf (argv[2], "%d", &L);
	sscanf (argv[3], "%d", &C);
	file = argv[4];
	

	int C= C*1024;
	int numOflines = C/L;
	int sets=numOfLines/K;
	int offsetBits = offsetLength(sets);
	int indexLengthBits = setIndexLength(K);
	int tagLengthBits = 32-offsetBits-indexLengthBits; 
	
	
	
	
	
	  unsigned int **tagArray;
	  int **lruArray;
	
	// allocate memory for tagArray and lruArray
	  tagArray = (unsigned int **) malloc(sets * sizeof(unsigned int *));
	  for(int i = 0; i< sets;i++){
		  tagArray[i]=(unsigned int *)malloc(K * sizeof(unsigned int));
	  }
	  lruArray = (int **) malloc(K *sizeof(int *));
	  for(int i=0; i< K;i++){
		  lruArray=(int *)malloc(K *size(int *));
	  }
	  
	  //instantiate lruarray
	  for(int i=0;i<K;i++){
		  int j=0;
		lruArray[i][j]=-1;
	  }
	  //initialize tagArray
	  for(int i=0;i<sets;i++){
		  for(int j=0;j<K;i++){
			tagArray[i][j]=0;  
		  }
	  }
	  
	  // Open the trace file
  FILE * trace;
  trace = fopen (file, "r");
	  
		
}

int whichSet(int setLocation){

}

int setIndexLength(set){
	return _log2(set);
}
int offsetLength(int block_size){
	return _log2(block_size);
	
}
hitWay(){
	
	
}
updateOnHit(){
	
	
}
updateOnMiss(){
	
	
}
*/
int mylog2(int n) {
  int c = -1;
  n -= 1;
  while (n > 0) {
    ++c;
    n >>= 1;
  }
  return c;
}
