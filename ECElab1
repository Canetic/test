/*Karl Shao, WenHao, Hung*/

#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>



int whichSet();
int setIndexLength();
int offsetLength();
int hitWay();
void updateOnHit();
void updateOnMiss();
int mylog2();
int tagBits();


int main(int argc, char **argv){

	int L, K, C;
	char * file;

	sscanf (argv[1], "%d", &K);
	sscanf (argv[2], "%d", &L);
	sscanf (argv[3], "%d", &C);
	file = argv[4];

	int sets=((C*1024)/L)/K;
	int offsetBits = offsetLength(sets);
	int setBits = setIndexLength(K);
	int tagLengthBits = 32-offsetBits-setBits;
	assert(K*sets*L==C*1024);
	assert(tagLengthBits+setBits+offsetBits==32);
	assert(mylog2(4) == 2);
	
	
	// allocate memory for tagArray and lruArray
	int i, j;
	 unsigned int **tagArray = (unsigned int **) malloc(sets * sizeof(unsigned int *));
	  for(i = 0; i< sets;i++){
		  tagArray[i]=(unsigned int *)malloc(K * sizeof(unsigned int));
	  }
	 int **lruArray = (int **) malloc(sets * sizeof(int *));
	  for(i=0; i< sets;i++){
		  lruArray[i]=(int *)malloc(K * sizeof(int));
	  }
	  
	 
	  //initialize tagArray and lruArray
	  for(i=0;i<sets;i++){
		  for(j=0;j<K;j++){
			tagArray[i][j]=0; 
			lruArray[i][j]=-1;			
		  }
	  }
	  assert(tagArray[0][0]==0);
	  assert(lruArray[0][0]==-1);
	  // Open the trace file
  FILE * trace;
  trace = fopen (file, "r");
  
 
	int hit = 0;
	int miss = 0;
	int address;
	//work on this code and need to understand 
	while(fscanf(trace, "%x", &address) != EOF){
		int tag = tagBits(address, offsetBits, setBits);
		int setLocation = whichSet(setBits, offsetBits, address);
		int tagLocation = hitWay(tagArray[setLocation], K, tag);
		assert(tagLocation>=-1);
	if(tagLocation<0){
		updateOnMiss(K, tagArray[setLocation], lruArray[setLocation], tagLocation);
		miss++;
	}else{
		updateOnHit(K, tagArray[setLocation], lruArray[setLocation], tagLocation);
		hit++;
	}
	}
	fclose(trace);	
	float miss_rate = (float) miss/ ((float) (hit + miss));
	
	printf("%s %d %d %d %.4f\n", file, C , K, L, miss_rate);
		
}

// have to review later

int tagBits(int address, int offsetBits, int setBits){ 
	return address >> (setBits + offsetBits);
}
int whichSet(int setBits, int offsetBits, int address){
	return (address >> offsetBits) & (~((~0) << setBits));
}

int setIndexLength(int set){
	return mylog2(set);
}
int offsetLength(int offset){
	return mylog2(offset);
	
}
int hitWay(int * tagArray, int K, int tag){
	int i;
	for(i=0;i<K;i++){
		if(tagArray[i]==tag){
			return i;
		}
	}
	return -1; 
	
}
void updateOnHit( int K, int * tagArray, int * lruArray, int tag){
	int tagArray_index;
	int i;
	for(i =0; i<K;i++){
		if(tagArray[i]==tag){
			tagArray_index=i;
		}
		if(lruArray[i]>-1){
			lruArray[i]++;
		}
	}
	lruArray[tagArray_index]=0;
	
}
void updateOnMiss ( int K, int * tagArray, int * lruArray, int tag){
	int lruArray_index =0;
	int lowest = lruArray[0];
	int i;
	for(i =0;i<K;i++){
	if(lruArray[i]==-1){
		lruArray_index=i;
		break;
	}else if(lruArray[i]>-1 && lruArray[i]<lowest){
			lowest = lruArray[i];
			lruArray_index=i;			
			}
	}
	int j;
	for(j =0;j<K;j++){
		if(lruArray[j]>-1 && lruArray[j]!=lowest)
			lruArray[j]++;
	}
	tagArray[lruArray_index] = tag; 
	lruArray[lruArray_index] = 0; 
}

int mylog2(int x) {
	int i;
	for(i = 1; (1<<i) <= x; i++){
		if(x == (1<<i)){
			return i;
		}
	}
	return i;
  }
 
