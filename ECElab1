#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>



int whichSet();
int setIndexLength();
int offsetLength();
int hitWay();
void updateOnHit();
void updateOnMiss();
int mylog2();
int *tag;

main(int argc, char **argv){
	// this is for a small test case
	//String[] = {408ed4, 10019d94, 408ed8}
	//printf("%i",  mylog2(1100));
	int L, K, C;
	char * file;
	
	sscanf (argv[1], "%d", &K);
	sscanf (argv[2], "%d", &L);
	sscanf (argv[3], "%d", &C);
	file = argv[4];
	

	int C= C*1024;
	int numOflines = C/L;
	int sets=numOfLines/K;
	int offsetBits = offsetLength(sets);
	int setBits = setIndexLength(K);
	int tagLengthBits = 32-offsetBits-setBits; 
	
	
	
	
	
	  unsigned int **tagArray;
	  int **lruArray;
	
	// allocate memory for tagArray and lruArray
	  tagArray = (unsigned int **) malloc(sets * sizeof(unsigned int *));
	  for(int i = 0; i< sets;i++){
		  tagArray[i]=(unsigned int *)malloc(K * sizeof(unsigned int));
	  }
	  lruArray = (int **) malloc(sets *sizeof(int *));
	  for(int i=0; i< K;i++){
		  lruArray=(int *)malloc(K *size(int *));
	  }
	  
	  //instantiate lruarray
	/*  for(int i=0;i<K;i++){
		  int j=0;
		lruArray[i][j]=-1;
	  }*/
	  //initialize tagArray
	  for(int i=0;i<sets;i++){
		  for(int j=0;j<K;i++){
			tagArray[i][j]=0; 
			lruArray[i][j]=-1;			
		  }
	  }
	  
	  // Open the trace file
  FILE * trace;
  trace = fopen (file, "r");
  
	int mask = 0;
    for (int i; i < L; i++) {
    mask <<= 8;
    mask |= 0xFF;
  }
	  
	int hit = 0;
	int miss = 0;
	int address;
	//work on this code and need to understand 
	while(fscanf(trace, "%x", &address) !=EOF){
		int tag = mask & tagbits// figure out how to do this
		int setLocation = whichSet(address, setBits, offsetBits);
		int tagLocation = hitWay(tagArray[setLocation], K, tag);
	if(tagLocation>-1){
		updateOnHit(tagArray[setLocation], lruArray[setLocation], K, tagLocation);
		hit++;
	}else{
		updateOnMiss(tagArray[setLocation], lruArray[setLocation], K, tagLocation);
		miss++;
	}
	fclose(trace);
	} 
	float miss_rate = (float) miss/ ((float) (hit + miss));
		
}
// have to review later 
int whichSet(int address, int setBits, int offsetBits){
	return (address >> setBits) & (~((~0) <<numSetBits));
}

int setIndexLength(set){
	return _log2(set);
}
int offsetLength(int block_size){
	return _log2(block_size);
	
}
hitWay(int * tagArray, int K, int tag){
	for(int i=0;i<K;i++){
		if(tagArray[i]==tag){
			return i;
		}
	}
	return -1; 
	
}
updateOnHit(int * tagArray, int * lruArray, int K, int tag){
	int tagArray_index;
	for(int i =0; i<K;i++){
		if(tagArray[i]==tag){
			tagArray_index=i;
		}
		if(lruArray[i]>-1){
			lruArray[i]++;
		}
	}
	lruArray[tagArray_index]=0;
	
}
updateOnMiss  int * tagArray, int * lruArray, int K, int tag){
	int lruArray_index =0;
	int lowest = lruArray[0];

	for(int i =0;i<K;i++){
	if(lruArray[i]==-1){
		lruArray_index=i;
		break;
	}else if(lruArray[i]>-1 && lruArray[i]<lowest){
			lowest = lruArray[i];
			lruArray_index=i;			
			}
	}
	/*for(int j =0;j<K;j++){
		if(lruArray[j]>-1 && lruArray[j]<lowest)
			lowest = lruArray[j];
			
	}*/
	for(int j =0;j<K;j++){
		if(lruArray[j]>-1 && lruArray[j]!=lowest)
			lruArray[j]++;
	}
	tagArray[lruArray_index] = tag; 
	lruArray[lruArray_index] = 0; 
}

int mylog2(int n) {
  int c = -1;
  n -= 1;
  while (n > 0) {
    ++c;
    n >>= 1;
  }
  return c;
  /*//returns log base 2 of x, rounding up 
//called by setIndexLenth() and offsetLength()
int lg(int x){

	int i;
	for(i = 1; (1<<i) <= x; i++)
		if(x == (1<<i))return i;
	return i;
	*/
}
